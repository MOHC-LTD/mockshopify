// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/Rob G/dev/backend/shopify/webhooks.go

// Package mockshopify is a generated GoMock package.
package mockshopify

import (
	reflect "reflect"

	shopify "github.com/MOHC-LTD/shopify/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockWebhookRepository is a mock of WebhookRepository interface.
type MockWebhookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookRepositoryMockRecorder
}

// MockWebhookRepositoryMockRecorder is the mock recorder for MockWebhookRepository.
type MockWebhookRepositoryMockRecorder struct {
	mock *MockWebhookRepository
}

// NewMockWebhookRepository creates a new mock instance.
func NewMockWebhookRepository(ctrl *gomock.Controller) *MockWebhookRepository {
	mock := &MockWebhookRepository{ctrl: ctrl}
	mock.recorder = &MockWebhookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookRepository) EXPECT() *MockWebhookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWebhookRepository) Create(webhook shopify.Webhook) (shopify.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", webhook)
	ret0, _ := ret[0].(shopify.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWebhookRepositoryMockRecorder) Create(webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWebhookRepository)(nil).Create), webhook)
}

// List mocks base method.
func (m *MockWebhookRepository) List() (shopify.Webhooks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(shopify.Webhooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWebhookRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebhookRepository)(nil).List))
}
