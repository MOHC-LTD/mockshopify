// Code generated by MockGen. DO NOT EDIT.
// Source: .\customers.go

// Package mock_shopify is a generated GoMock package.
package mockshopify

import (
	v2 "github.com/MOHC-LTD/shopify/v2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockCustomerRepository) Update(customer v2.Customer) (v2.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", customer)
	ret0, _ := ret[0].(v2.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCustomerRepositoryMockRecorder) Update(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerRepository)(nil).Update), customer)
}
// Get mocks base method.
func (m *MockCustomerRepository) Get(id int64) (v2.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(v2.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerRepository)(nil).Get), id)
}

// GetByQuery mocks base method.
func (m *MockCustomerRepository) GetByQuery(fields []string, query v2.CustomerSearchQuery) (v2.Customers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuery", fields, query)
	ret0, _ := ret[0].(v2.Customers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuery indicates an expected call of GetByQuery.
func (mr *MockCustomerRepositoryMockRecorder) GetByQuery(fields, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuery", reflect.TypeOf((*MockCustomerRepository)(nil).GetByQuery), fields, query)
}

// List mocks base method.
func (m *MockCustomerRepository) List(query v2.CustomerSearchQuery) (v2.Customers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", query)
	ret0, _ := ret[0].(v2.Customers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCustomerRepositoryMockRecorder) List(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCustomerRepository)(nil).List), query)
}

// Orders mocks base method.
func (m *MockCustomerRepository) Orders(id int64, query v2.OrderQuery) (v2.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", id, query)
	ret0, _ := ret[0].(v2.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockCustomerRepositoryMockRecorder) Orders(id, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockCustomerRepository)(nil).Orders), id, query)
}

