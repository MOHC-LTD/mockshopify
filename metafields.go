// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/ian/Documents/dev/shopify/metafields.go

// Package mock_shopify is a generated GoMock package.
package mockshopify

import (
	reflect "reflect"

	shopify "github.com/MOHC-LTD/shopify"
	gomock "github.com/golang/mock/gomock"
)

// MockMetaFieldRepository is a mock of MetaFieldRepository interface.
type MockMetaFieldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetaFieldRepositoryMockRecorder
}

// MockMetaFieldRepositoryMockRecorder is the mock recorder for MockMetaFieldRepository.
type MockMetaFieldRepositoryMockRecorder struct {
	mock *MockMetaFieldRepository
}

// NewMockMetaFieldRepository creates a new mock instance.
func NewMockMetaFieldRepository(ctrl *gomock.Controller) *MockMetaFieldRepository {
	mock := &MockMetaFieldRepository{ctrl: ctrl}
	mock.recorder = &MockMetaFieldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaFieldRepository) EXPECT() *MockMetaFieldRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMetaFieldRepository) List(query shopify.MetafieldQuery) (shopify.Metafields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", query)
	ret0, _ := ret[0].(shopify.Metafields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMetaFieldRepositoryMockRecorder) List(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetaFieldRepository)(nil).List), query)
}
