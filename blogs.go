// Code generated by MockGen. DO NOT EDIT.
// Source: ../shopify/blog.go

// Package mockshopify is a generated GoMock package.
package mockshopify

import (
	reflect "reflect"

	shopify "github.com/MOHC-LTD/shopify/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockBlogRepository is a mock of BlogRepository interface.
type MockBlogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlogRepositoryMockRecorder
}

// MockBlogRepositoryMockRecorder is the mock recorder for MockBlogRepository.
type MockBlogRepositoryMockRecorder struct {
	mock *MockBlogRepository
}

// NewMockBlogRepository creates a new mock instance.
func NewMockBlogRepository(ctrl *gomock.Controller) *MockBlogRepository {
	mock := &MockBlogRepository{ctrl: ctrl}
	mock.recorder = &MockBlogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogRepository) EXPECT() *MockBlogRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBlogRepository) Get(id int64) (shopify.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(shopify.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlogRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlogRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockBlogRepository) GetAll() (shopify.Blogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(shopify.Blogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBlogRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBlogRepository)(nil).GetAll))
}
