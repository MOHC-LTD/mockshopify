// Code generated by MockGen. DO NOT EDIT.
// Source: internal/shopify/fulfillments.go

// Package mockshopify is a generated GoMock package.
package mockshopify

import (
	shopify "github.com/MOHC-LTD/shopify"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFulfillmentRepository is a mock of FulfillmentRepository interface
type MockFulfillmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFulfillmentRepositoryMockRecorder
}

// MockFulfillmentRepositoryMockRecorder is the mock recorder for MockFulfillmentRepository
type MockFulfillmentRepositoryMockRecorder struct {
	mock *MockFulfillmentRepository
}

// NewMockFulfillmentRepository creates a new mock instance
func NewMockFulfillmentRepository(ctrl *gomock.Controller) *MockFulfillmentRepository {
	mock := &MockFulfillmentRepository{ctrl: ctrl}
	mock.recorder = &MockFulfillmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFulfillmentRepository) EXPECT() *MockFulfillmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFulfillmentRepository) Create(orderID int64, fulfillment shopify.Fulfillment) (shopify.Fulfillment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", orderID, fulfillment)
	ret0, _ := ret[0].(shopify.Fulfillment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFulfillmentRepositoryMockRecorder) Create(orderID, fulfillment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFulfillmentRepository)(nil).Create), orderID, fulfillment)
}

// Update mocks base method
func (m *MockFulfillmentRepository) Update(orderID, fulfillmentID int64, update shopify.Fulfillment) (shopify.Fulfillment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", orderID, fulfillmentID, update)
	ret0, _ := ret[0].(shopify.Fulfillment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockFulfillmentRepositoryMockRecorder) Update(orderID, fulfillmentID, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFulfillmentRepository)(nil).Update), orderID, fulfillmentID, update)
}

// Cancel mocks base method
func (m *MockFulfillmentRepository) Cancel(orderID, fulfillmentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", orderID, fulfillmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockFulfillmentRepositoryMockRecorder) Cancel(orderID, fulfillmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockFulfillmentRepository)(nil).Cancel), orderID, fulfillmentID)
}
